// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MotoApi.Data;

#nullable disable

namespace MotoApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250525165149_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("MotoApi.Models.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CapacidadeAtual")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CapacidadeMax")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GalpaoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TipoArea")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GalpaoId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("MotoApi.Models.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("MotoApi.Models.Corredor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AreaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NomeCorredor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Corredores");
                });

            modelBuilder.Entity("MotoApi.Models.Galpao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CapacidadeAtual")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CapacidadeMax")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Numero")
                        .HasColumnType("TEXT");

                    b.Property<string>("Regiao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Galpoes");
                });

            modelBuilder.Entity("MotoApi.Models.Moto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Ano")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClienteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Disponibilidade")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("VagaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("VagaId");

                    b.ToTable("Motos");
                });

            modelBuilder.Entity("MotoApi.Models.Vaga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CodigoVaga")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CorredorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CorredorId");

                    b.ToTable("Vagas");
                });

            modelBuilder.Entity("MotoApi.Models.Area", b =>
                {
                    b.HasOne("MotoApi.Models.Galpao", "Galpao")
                        .WithMany("Areas")
                        .HasForeignKey("GalpaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Galpao");
                });

            modelBuilder.Entity("MotoApi.Models.Corredor", b =>
                {
                    b.HasOne("MotoApi.Models.Area", "Area")
                        .WithMany("Corredores")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("MotoApi.Models.Moto", b =>
                {
                    b.HasOne("MotoApi.Models.Cliente", "Cliente")
                        .WithMany("Motos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotoApi.Models.Vaga", "Vaga")
                        .WithMany("Motos")
                        .HasForeignKey("VagaId");

                    b.Navigation("Cliente");

                    b.Navigation("Vaga");
                });

            modelBuilder.Entity("MotoApi.Models.Vaga", b =>
                {
                    b.HasOne("MotoApi.Models.Corredor", "Corredor")
                        .WithMany("Vagas")
                        .HasForeignKey("CorredorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corredor");
                });

            modelBuilder.Entity("MotoApi.Models.Area", b =>
                {
                    b.Navigation("Corredores");
                });

            modelBuilder.Entity("MotoApi.Models.Cliente", b =>
                {
                    b.Navigation("Motos");
                });

            modelBuilder.Entity("MotoApi.Models.Corredor", b =>
                {
                    b.Navigation("Vagas");
                });

            modelBuilder.Entity("MotoApi.Models.Galpao", b =>
                {
                    b.Navigation("Areas");
                });

            modelBuilder.Entity("MotoApi.Models.Vaga", b =>
                {
                    b.Navigation("Motos");
                });
#pragma warning restore 612, 618
        }
    }
}
